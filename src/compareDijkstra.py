#우선순위 큐는 우선순위가 가장 높은 데이터를 가장 먼저 삭제한다는 점이 특징이다.
#여러 개의 물건 데이터를 자료구조에 넣었다가 가치가 높은 물건 데이터부터 꺼내서 확인해야 하는 경우를 정해보자
#일반적으로 정수형 자료형의 변수가 사용된다. 예를 들면 물건 정보가 있고, 이 물건 정보는 물건의 가치와 물건의 무게로만
#구성된다고 가정해보자. 그러면 모든 물건 데이터를(가치, 물건)으로 묶어서 우선순위 큐 자료구조에 넣을 수 있다.
#우선순위 큐에서는 물건을 꺼내게 되면 항상 가치가 높은 물건이 먼저 나오게 된다.
#따라서 데이터가 (가치, 물건)으로 구성된다면 '가치'값이 우선순위 값이 되는 것이다.
#최소 힙을 이용하는 경우 '값이 낮은 데이터가 먼저 삭제'
#최대 힙을 이용하는 경우 '값이 큰 데이터가 먼저 삭제'
# 파이썬 라이브러리에서는 기본적으로 최소 힙 구조를 이용하는데 다익스트라 최단 경로 알고리즘에서는
# 비용이 적은 노드를 우선하여 방문하므로 최소 힙 구조를 기반으로 하는 파이썬의 우선순위 큐 라이브러리를 그대로 사용

#최소 힙을 최대 힙처럼 사용하기 위해서는 일부로 우선순위에 해당하는 값에 음수 부호(-)를 붙여서 넣었다가, 나중에
# 우선순위 큐에서 꺼낸 다음에 다시 음수 부호(-)를 붙여서 원래의 값으로 돌리는 방식을 사용할 수 있다.

#리스트로 구현한 우선순위 큐보다 힙을 이용한 우선순위 큐가 더 빠르게 동작한다. O(logNO)
#최소 힙을 이용하는 경우 힙에서 원소를 꺼내면 '가장 값이 작은 원소'가 추출하는 특징이 있으며, 파이썬의
#우선순위 큐 라이브러리는 최소 힙에 기반한다는 점을 기억하자 이 기반으로 다익스트라 최단 경로 알고리즘에 적용한다.

import heapq
import sys
imput = sys.stdin.readline
INF = int(1e9) #무한을 의미하는 값으로 10억을 설정

#노드의 개수, 간선의 개수를 입력받기
n, m = map(int, input().split())
#시작 노드의 번호를 입력받기
start = int(input())
#각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트를 만들기
graph = [[] for i in range(n+1)]
#최단 거리 테이블을 모두 무한으로 초기화
distance = [INF]*(n+1)

#모든 간선 정보를 입력받기
for _ in range(m):
    a, b, c = map(int, input().split())
    # a번 노드에서 b번 노드로 가는 비용 c라는 의미
    graph[a].append((b,c))

def dijkstra(start):
    q = []
    #시작 노드로 가기 위한 최단 경로는 0으로 설정하며, 큐에 삽입
    heapq.heappush(q, (0,start))
    distance[start] = 0
    while q: #큐가 비어있지 않다면
        # 가장 최단 거리가 짧은 노드에 대한 정보를 꺼내기
        dist, now = heapq.heappop(q)
        # 현재 노드와 연결된 다른 인접한 노드들을 확인
            for i in graph[now]:
            cost = dist + i[1]
            # 현재 노드를 거쳐서, 다른 노드로 이동하는 거리가 더 짧은 경우
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

#다익스트라 알고리즘 수행
dijkstra(start)

#모든 노드로 가기 위한 최단 거리를 출력
for i in range(1, n+1):
    #도달할 수 없는 경우, 무한(INFINITY)이라고 출력
    if distance[i] == INF:
        print("INFINITY")
        #도달할 수 있는 경우 거리를 출력
    else:
        print(distance[i])